import os
import shutil
from json import dumps
from pathlib import Path

from ..ponder import Ponder
from ..format import logger
from .compiler import compile_operations


def compile_to_datapack(
        ponder: Ponder,
        version: bool = True,
        pos_offset: tuple = (0, 0, 0),
        ponder_name: str = "ponders",
        output_dir: str = "."
    ):
    """
    编译思索对象为Minecraft数据包
    :param ponder: 你的思索对象
    :param version: 是否为1.21+版本
    :param ponder_name: 你的思索名称
    :param pos_offset: 偏移坐标
    :param output_dir: 输出目录
    :return: 输出路径
    """
    logger.info(f"正在编译思索为数据包...")
    logger.debug(f"传入参数: version={version}, pos_offset={pos_offset}, ponder_name={ponder_name}, "
                 f"output_dir={output_dir}")

    datapack_dir = Path(output_dir) / ponder_name

    # 检测输出的zip文件是否存在
    if os.path.exists(f'{output_dir}/{ponder_name}.zip'):
        logger.warning(f"输出文件 {ponder_name}.zip 已存在, 可能覆盖已有文件, 是否继续? (y/n)")
        if input().lower() != "y":
            logger.info(f"已取消编译.")
            return

    commands = compile_operations(ponder, pos_offset)

    # 生成数据包主结构
    if not datapack_dir.exists():
        datapack_dir.mkdir(parents=True)

    # 生成pack.mcmeta
    meta_data = {
        "pack": {
            "pack_format": 16,
            "supported_formats": [16, 39],
            "description": "使用 creepe_ponder 生成的思索数据包"
        }
    }
    meta_file = datapack_dir / "pack.mcmeta"
    meta_file.write_text(dumps(meta_data), encoding="Utf-8")

    # 生成用于存放函数的文件夹
    function_dir = datapack_dir / f"data/{ponder_name}" / "function" if version else "functions"
    function_dir.mkdir(parents=True)

    functions = {}  # 存放函数的列表
    # 整理每个时刻工作的指令
    for command in commands:
        time, command_str = command
        if time in functions:
            functions[time].append(command_str)
            contiune
        functions[time] = ['# Generated by creepe_ponder', command_str]

    # 将指令写入函数文件
    for time, command_list in functions.items():
        function_file = function_dir / f"_{time}.mcfunction"
        function_file.write_text('\n'.join(command_list))

    # 生成主函数文件
    command_list = ['# Generated by creepe_ponder']

    # 使用/schedule指令让函数文件按顺序执行
    for time in functions.keys():
        command_list.append(f"schedule function {ponder_name}:{time} {time * 2 + 1} append")  # rt转为gt, 并增加一个偏移量

    main_function_file = function_dir / "main.mcfunction"
    main_function_file.write_text('\n'.join(command_list))

    # 打包数据包
    shutil.make_archive(datapack_dir, "zip", datapack_dir)

    # 删除临时文件
    shutil.rmtree(datapack_dir)

    logger.info(f"编译完成, 共在{len(functions)}个时刻输出{len(commands)}条指令, "
                f"总动画长度: {max(functions.keys()) / 20}秒, 输出路径: {output_dir}/{ponder_name}.zip")
